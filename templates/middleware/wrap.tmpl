package middleware

import (
	"os"

	"github.com/go-kit/kit/log"

	"{{.ImportPath}}/pkg/{{.Package}}"
	"{{.ImportPath}}/pkg/svc"
)

// WrapEndpoints accepts the service's entire collection of endpoints, so that a
// set of middlewares can be wrapped around every middleware (e.g., access
// logging and instrumentation), and others wrapped selectively around some
// endpoints and not others (e.g., endpoints requiring authenticated access).
// Note that the final middleware wrapped will be the outermost middleware
// (i.e. applied first)
func WrapEndpoints(in svc.Endpoints) (out svc.Endpoints) {

	// Pass a middleware you want applied to every endpoint.
	// optionally pass in endpoints by name that you want to be excluded
	// e.g.
	// in.WrapAllExcept(authMiddleware, "Status", "Ping")

	// Pass in a svc.LabeledMiddleware you want applied to every endpoint.
	// These middlewares get passed the endpoints name as their first argument when applied.
	// This can be used to write generic metric gathering middlewares that can
	// report the endpoint name for free.

	// How to apply a middleware to a single endpoint.
	// in.ExampleEndpoint = authMiddleware(in.ExampleEndpoint)

	l := log.NewLogfmtLogger(log.NewSyncWriter(os.Stderr))
	l = log.With(l, "ts", log.DefaultTimestampUTC, "svc", "{{.ServiceName}}")
	in.WrapAllLabeledExcept(logger(l))

	return in
}

// WrapService wraps the service with middleware
func WrapService(in {{.Package}}.{{.ServiceName}}Server) (out {{.Package}}.{{.ServiceName}}Server) {

	return in
}
