package transport

// This file provides server-side bindings for the HTTP transport.

import (
	"context"
	"encoding/json"
	"net/http"
	"strings"

	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/gorilla/mux"

	pb "{{.ImportPath}}/pkg/pb"
	"{{.ImportPath}}/pkg/svc"
)

{{- $sname := .ServiceName}}

const contentType = "application/json; charset=utf-8"

// type definision for passing context values
// type ctxKey string

// MakeHTTPHandler returns a handler that makes a set of endpoints available
// on predefined paths.
func MakeHTTPHandler(endpoints svc.Endpoints, options ...httptransport.ServerOption) http.Handler {
	serverOptions := []httptransport.ServerOption{
		httptransport.ServerBefore(httptransport.PopulateRequestContext),
		httptransport.ServerBefore(headersToContext),
		httptransport.ServerErrorEncoder(errorEncoder),
		httptransport.ServerAfter(httptransport.SetContentType(contentType)),
	}
	serverOptions = append(serverOptions, options...)

	m := mux.NewRouter()
	
	{{- range .Methods}}{{if .HTTPMethod}}
	
	m.Methods("{{.HTTPMethod}}").Path("{{.HTTPurl}}").Handler(httptransport.NewServer(
		endpoints.{{.Name}}Endpoint,
		DecodeHTTP{{.Name}}Request,
		EncodeHTTPGenericResponse,
		serverOptions...,
	)){{end}}{{end}}

	return m
}

// HTTPError satisfies the Headerer and StatusCoder interfaces in
// package kit/transport/http.
type HTTPError struct {
	error
	statusCode int
	headers    http.Header
}

// StatusCode return the status code of the error
func (h HTTPError) StatusCode() int {
	return h.statusCode
}

// Headers return the http headers
func (h HTTPError) Headers() http.Header {
	return h.headers
}

type errorWrapper struct {
	Error string `json:"error"`
}

// ErrorEncoder writes the error to the ResponseWriter, by default a content
// type of application/json, a body of json with key "error" and the value
// error.Error(), and a status code of 500. If the error implements Headerer,
// the provided headers will be applied to the response. If the error
// implements json.Marshaler, and the marshaling succeeds, the JSON encoded
// form of the error will be used. If the error implements StatusCoder, the
// provided StatusCode will be used instead of 500.
func errorEncoder(_ context.Context, err error, w http.ResponseWriter) {
	body, _ := json.Marshal(errorWrapper{Error: err.Error()})
	if marshaler, ok := err.(json.Marshaler); ok {
		if jsonBody, marshalErr := marshaler.MarshalJSON(); marshalErr == nil {
			body = jsonBody
		}
	}

	w.Header().Set("Content-Type", contentType)
	if headerer, ok := err.(httptransport.Headerer); ok {
		for k := range headerer.Headers() {
			w.Header().Set(k, headerer.Headers().Get(k))
		}
	}

	code := http.StatusInternalServerError
	if sc, ok := err.(httptransport.StatusCoder); ok {
		code = sc.StatusCode()
	}

	w.WriteHeader(code)
	w.Write(body)
}

// Server Decode

{{- range .Methods}}

// DecodeHTTP{{.Name}}Request is a transport/http/DecodeRequestFunc that
// decodes a JSON-encoded {{.NameLowerCase}} request from the HTTP request body.
func DecodeHTTP{{.Name}}Request(_ context.Context, r *http.Request) (interface{}, error) {
	var req pb.{{.Name}}Request

	// if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
	// 	return nil, fmt.Errorf("Failed to decode json request: %w", err)
	// }

	return &req, nil
}{{end}}

// EncodeHTTPGenericResponse is a transport/http.EncodeResponseFunc that encodes
// the response as JSON to the response writer. Primarily useful in a server.
func EncodeHTTPGenericResponse(_ context.Context, w http.ResponseWriter, response interface{}) (err error) {
	return json.NewEncoder(w).Encode(response)
}

// Helper functions

func headersToContext(ctx context.Context, r *http.Request) context.Context {
	ctx = context.WithValue(ctx, CtxKey("Transport"), "HTTP")

	for k := range r.Header {
		// The key is added both in http format (k) which has had
		// http.CanonicalHeaderKey called on it in transport as well as the
		// strings.ToLower which is the grpc metadata format of the key so
		// that it can be accessed in either format
		ctx = context.WithValue(ctx, CtxKey(k), r.Header.Get(k))
		ctx = context.WithValue(ctx, CtxKey(strings.ToLower(k)), r.Header.Get(k))
	}

	return ctx
}
