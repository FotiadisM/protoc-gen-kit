package middleware

import (
	"context"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/metrics"

	"{{.ImportPath}}/pkg/svc"
)

// ErrorCounter is a LabeledMiddleware, when applied with WrapAllLabeledExcept name will be populated with the endpoint name, and such this middleware will
// report errors to the metric provider with the endpoint name. Feel free to
// copy this example middleware to your service.
func errorCounter(errCount metrics.Counter) svc.LabeledMiddleware {
	return func(name string, in endpoint.Endpoint) endpoint.Endpoint {
		return func(ctx context.Context, request interface{}) (response interface{}, err error) {
			response, err = in(ctx, request)
			if err != nil {
				errCount.With("endpoint", name).Add(1)
			}

			return
		}
	}
}

// Latency is a LabeledMiddleware, reporting the request time of and
// endpoint along with its name
func latency(h metrics.Histogram) svc.LabeledMiddleware {
	return func(name string, in endpoint.Endpoint) endpoint.Endpoint {
		return func(ctx context.Context, request interface{}) (response interface{}, err error) {
			defer func(begin time.Time) {
				h.With("endpoint", name).Observe(time.Since(begin).Seconds())
			}(time.Now())

			return in(ctx, request)
		}
	}
}

// looger is a LabeledMiddleware that logs the request time and error, if any
func logger(l log.Logger) svc.LabeledMiddleware {
	return func(name string, in endpoint.Endpoint) endpoint.Endpoint {
		return func(ctx context.Context, request interface{}) (response interface{}, err error) {
			tr := ctx.Value("Transport").(string)
			defer func(begin time.Time) {
				_ = l.Log(
					"transport", tr,
					"method", name,
					"err", err,
					"took", time.Since(begin),
				)
			}(time.Now())

			return in(ctx, request)
		}
	}
}
